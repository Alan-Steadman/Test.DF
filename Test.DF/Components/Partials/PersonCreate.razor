@inject AppStateContainer appStateContainer
@inject NavigationManager navigationManager
@using System.ComponentModel.DataAnnotations
@using Test.DF.Infrastructure.DataAnnotations
@rendermode InteractiveServer

<p>
    Please enter your details in the form below
</p>

<EditForm Model="@model" OnValidSubmit="@Submit" FormName="CreatePerson">

    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label for="fullName">Full Name</label>
        <InputText id="fullName" @bind-Value="model!.FullName" placeholder="Full Name" class="form-control" aria-describedby="fullNameHelp" />
        <small id="fullNameHelp">Enter your full name with a space betwen first and last names</small>
    </div>

    <div class="form-group mb-3">
        <label for="dob">Date of Birth</label>
        <InputDate id="dob" @bind-Value="model!.Dob" DisplayName="DOB" class="form-control" aria-describedby="dobNameHelp" />
        <small id="dobNameHelp">Enter your date of birth</small>
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>

    <ValidationSummary />

</EditForm>

@code {

    [SupplyParameterFromForm]
    private CreatePersonDto? model { get; set; }

    protected override void OnInitialized() => model ??= new();

    public class CreatePersonDto
    {
        [Required]
        [RegularExpression(Person.FullNameRegex, ErrorMessage = Person.FullNameRegexMessage)]
        public string FullName { get; set; } = string.Empty;

        [Required]
        [Past(ErrorMessage = Person.DobFutureMessage)]
        public DateOnly Dob { get; set; }
    }

    public async Task Submit()
    {
        Person person = Person.Create(
            fullName: model!.FullName,
            dob: model!.Dob);

        await appStateContainer.SetPersonAsync(person);

        navigationManager.NavigateTo("/person");
    }
}
